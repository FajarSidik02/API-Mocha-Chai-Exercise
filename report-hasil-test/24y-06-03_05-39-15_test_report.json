{
  "stats": {
    "suites": 5,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-02T22:39:13.795Z",
    "end": "2024-06-02T22:39:15.333Z",
    "duration": 1538,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5cea337a-1f0b-499b-bc93-6fabc639e0da",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "212a99ca-59ba-45ff-ac23-f963f1fc00cb",
          "title": "json-schema-traverse",
          "fullFile": "E:\\code\\API_Mocha_Exercise\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
          "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"json-schema-traverse\"",
              "fullTitle": "json-schema-traverse \"before each\" hook in \"json-schema-traverse\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "calls = [];",
              "err": {},
              "uuid": "169030d9-be6a-47ae-9702-88a1d5bb61bd",
              "parentUUID": "212a99ca-59ba-45ff-ac23-f963f1fc00cb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "should traverse all keywords containing schemas recursively",
              "fullTitle": "json-schema-traverse should traverse all keywords containing schemas recursively",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var schema = require('./fixtures/schema').schema;\nvar expectedCalls = require('./fixtures/schema').expectedCalls;\ntraverse(schema, {cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
              "err": {},
              "uuid": "43fe935a-eec8-4e9b-9c24-f9adb404b561",
              "parentUUID": "212a99ca-59ba-45ff-ac23-f963f1fc00cb",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "594394e0-b166-4381-be58-d0fcdeb7a82e",
              "title": "Legacy v0.3.1 API",
              "fullFile": "E:\\code\\API_Mocha_Exercise\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should traverse all keywords containing schemas recursively",
                  "fullTitle": "json-schema-traverse Legacy v0.3.1 API should traverse all keywords containing schemas recursively",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var schema = require('./fixtures/schema').schema;\nvar expectedCalls = require('./fixtures/schema').expectedCalls;\ntraverse(schema, callback);\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "d5aaa22e-2416-477b-883d-6dd777adfea6",
                  "parentUUID": "594394e0-b166-4381-be58-d0fcdeb7a82e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work when an options object is provided",
                  "fullTitle": "json-schema-traverse Legacy v0.3.1 API should work when an options object is provided",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar schema = require('./fixtures/schema').schema;\nvar expectedCalls = require('./fixtures/schema').expectedCalls;\ntraverse(schema, {}, callback);\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "f12f3463-4b1b-4afa-bde0-ec82642e73da",
                  "parentUUID": "594394e0-b166-4381-be58-d0fcdeb7a82e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d5aaa22e-2416-477b-883d-6dd777adfea6",
                "f12f3463-4b1b-4afa-bde0-ec82642e73da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "64a5955f-2e1c-4641-a4df-f6810e334036",
              "title": "allKeys option",
              "fullFile": "E:\\code\\API_Mocha_Exercise\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should traverse objects with allKeys: true option",
                  "fullTitle": "json-schema-traverse allKeys option should traverse objects with allKeys: true option",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema, '', schema, undefined, undefined, undefined, undefined],\n  [schema.someObject, '/someObject', schema, '', 'someObject', schema, undefined]\n];\ntraverse(schema, {allKeys: true, cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "eb606cad-c9ab-4a7a-a909-ad7bd61d18b3",
                  "parentUUID": "64a5955f-2e1c-4641-a4df-f6810e334036",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should NOT traverse objects with allKeys: false option",
                  "fullTitle": "json-schema-traverse allKeys option should NOT traverse objects with allKeys: false option",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema, '', schema, undefined, undefined, undefined, undefined]\n];\ntraverse(schema, {allKeys: false, cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "47f822bf-02aa-41d4-b3e7-a6d74046eb36",
                  "parentUUID": "64a5955f-2e1c-4641-a4df-f6810e334036",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should NOT traverse objects without allKeys option",
                  "fullTitle": "json-schema-traverse allKeys option should NOT traverse objects without allKeys option",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema, '', schema, undefined, undefined, undefined, undefined]\n];\ntraverse(schema, {cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "036a2610-a629-4b12-bce3-230b5f6cc403",
                  "parentUUID": "64a5955f-2e1c-4641-a4df-f6810e334036",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should NOT travers objects in standard keywords which value is not a schema",
                  "fullTitle": "json-schema-traverse allKeys option should NOT travers objects in standard keywords which value is not a schema",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var schema2 = {\n  const: {foo: 'bar'},\n  enum: ['a', 'b'],\n  required: ['foo'],\n  another: {\n  },\n  patternProperties: {}, // will not traverse - no properties\n  dependencies: true, // will not traverse - invalid\n  properties: {\n    smaller: {\n      type: 'number'\n    },\n    larger: {\n      type: 'number',\n      minimum: {$data: '1/smaller'}\n    }\n  }\n};\n// schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex\nvar expectedCalls = [\n  [schema2, '', schema2, undefined, undefined, undefined, undefined],\n  [schema2.another, '/another', schema2, '', 'another', schema2, undefined],\n  [schema2.properties.smaller, '/properties/smaller', schema2, '', 'properties', schema2, 'smaller'],\n  [schema2.properties.larger, '/properties/larger', schema2, '', 'properties', schema2, 'larger'],\n];\ntraverse(schema2, {allKeys: true, cb: callback});\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "12230f6f-e8b9-46d6-80f4-d64217557475",
                  "parentUUID": "64a5955f-2e1c-4641-a4df-f6810e334036",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "eb606cad-c9ab-4a7a-a909-ad7bd61d18b3",
                "47f822bf-02aa-41d4-b3e7-a6d74046eb36",
                "036a2610-a629-4b12-bce3-230b5f6cc403",
                "12230f6f-e8b9-46d6-80f4-d64217557475"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3387fa81-958c-43a8-bd3b-2d0c123e7c9d",
              "title": "pre and post",
              "fullFile": "E:\\code\\API_Mocha_Exercise\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "file": "\\node_modules\\json-schema-traverse\\spec\\index.spec.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should traverse schema in pre-order",
                  "fullTitle": "json-schema-traverse pre and post should traverse schema in pre-order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "traverse(schema, {cb: {pre}});\nvar expectedCalls = [\n  ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n  ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n];\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "cdf57c13-4007-4155-87da-ae22217afe98",
                  "parentUUID": "3387fa81-958c-43a8-bd3b-2d0c123e7c9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should traverse schema in post-order",
                  "fullTitle": "json-schema-traverse pre and post should traverse schema in post-order",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "traverse(schema, {cb: {post}});\nvar expectedCalls = [\n  ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n  ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n];\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "0a347859-39d5-4647-aaa2-78ad2682db97",
                  "parentUUID": "3387fa81-958c-43a8-bd3b-2d0c123e7c9d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should traverse schema in pre- and post-order at the same time",
                  "fullTitle": "json-schema-traverse pre and post should traverse schema in pre- and post-order at the same time",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "traverse(schema, {cb: {pre, post}});\nvar expectedCalls = [\n  ['pre', schema, '', schema, undefined, undefined, undefined, undefined],\n  ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],\n  ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n  ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],\n  ['post', schema, '', schema, undefined, undefined, undefined, undefined],\n];\nassert.deepStrictEqual(calls, expectedCalls);",
                  "err": {},
                  "uuid": "939e3ee8-67ff-4ed6-a0ca-025363659a18",
                  "parentUUID": "3387fa81-958c-43a8-bd3b-2d0c123e7c9d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cdf57c13-4007-4155-87da-ae22217afe98",
                "0a347859-39d5-4647-aaa2-78ad2682db97",
                "939e3ee8-67ff-4ed6-a0ca-025363659a18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "43fe935a-eec8-4e9b-9c24-f9adb404b561"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a389f074-082e-4b8a-ae2b-9fb96f5c91a9",
          "title": "GET API Testing",
          "fullFile": "E:\\code\\API_Mocha_Exercise\\tes1.spec.js",
          "file": "\\tes1.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get All Post",
              "fullTitle": "GET API Testing Get All Post",
              "timedOut": false,
              "duration": 738,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await axios.get('https://dummyjson.com/posts')\nexpect (res.data).to.be.jsonSchema(getAllPosts)",
              "err": {},
              "uuid": "1962a8d2-c03d-426a-8f76-7d0c966ca82e",
              "parentUUID": "a389f074-082e-4b8a-ae2b-9fb96f5c91a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get 1 Post by ID",
              "fullTitle": "GET API Testing Get 1 Post by ID",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await axios.get('https://dummyjson.com/posts/1')\nexpect (res.data).to.be.jsonSchema(get1post)",
              "err": {},
              "uuid": "c1f32019-3e08-4bbf-b5ac-87b1394e0731",
              "parentUUID": "a389f074-082e-4b8a-ae2b-9fb96f5c91a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Post 1 Post by ID",
              "fullTitle": "GET API Testing Post 1 Post by ID",
              "timedOut": false,
              "duration": 185,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await axios.post('https://dummyjson.com/posts/add',{\n    title : 'si kancil dan buaya',\n    userId : 5\n})\nexpect (res.data).to.be.jsonSchema(post1posts)\nexpect (res.data.title).to.equal('si kancil dan buaya')\nexpect (res.data.userId).to.equal(5)",
              "err": {},
              "uuid": "52576ac8-2dce-4dfd-9be1-d036c73d6714",
              "parentUUID": "a389f074-082e-4b8a-ae2b-9fb96f5c91a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Put 1 Post by ID",
              "fullTitle": "GET API Testing Put 1 Post by ID",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await axios.put('https://dummyjson.com/posts/2',{ // method put pada posts\ntitle : 'proyek roro jonggrang',\nbody : 'semua proyek yang selesai satu malam',\nuserId : 5\n    })\nexpect (res.data).to.be.jsonSchema(put1post)\nexpect (res.data.title).to.equal('proyek roro jonggrang')\nexpect (res.data.userId).to.equal(5)\nexpect (res.data.body).to.equal('semua proyek yang selesai satu malam')",
              "err": {},
              "uuid": "46fd610d-0f6e-4dd1-a5a0-cae68cc23dd1",
              "parentUUID": "a389f074-082e-4b8a-ae2b-9fb96f5c91a9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete 1 Post by ID",
              "fullTitle": "GET API Testing Delete 1 Post by ID",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const res = await axios.delete('https://dummyjson.com/posts/1')\nexpect (res.data).to.be.jsonSchema(delete1post)",
              "err": {},
              "uuid": "9388921a-61f0-4789-b994-9f4d1453baec",
              "parentUUID": "a389f074-082e-4b8a-ae2b-9fb96f5c91a9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1962a8d2-c03d-426a-8f76-7d0c966ca82e",
            "c1f32019-3e08-4bbf-b5ac-87b1394e0731",
            "52576ac8-2dce-4dfd-9be1-d036c73d6714",
            "46fd610d-0f6e-4dd1-a5a0-cae68cc23dd1",
            "9388921a-61f0-4789-b994-9f4d1453baec"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1480,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "[datetime]_test_report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "report-hasil-test",
        "reportFilename": "[datetime]_test_report",
        "timestamp": "yyy-mm-dd hh-MM-ss"
      },
      "version": "6.2.0"
    }
  }
}